/*
Local onde as fotos ser√£o armazenadas

C:\Documents and Settings\deciodecarvalho\Meus documentos\Google Drive\projetosJava\Atividade\GraficoSimples\MeusGraficos
 */
package pdf;

import java.awt.Dimension;
import java.awt.Image; //em uso
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author deciodecarvalho
 */
public class CriarPdf extends javax.swing.JFrame {

    private javax.swing.JFileChooser jFileChooserFoto;
    private String fotoUrl, fotoSource;
    
    /**
     * Creates new form CriarPdf
     */
    public CriarPdf() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelPrincipal = new javax.swing.JPanel();
        painelArquivo = new javax.swing.JPanel();
        lblArquivoDestino = new javax.swing.JLabel();
        lblArquivoOrigem = new javax.swing.JLabel();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        painelFoto = new javax.swing.JPanel();
        lblFoto = new javax.swing.JLabel();
        painelPdf = new javax.swing.JPanel();
        lblFoto1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnSair = new javax.swing.JButton();
        btnConverterFotoPdf = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        painelArquivo.setBorder(javax.swing.BorderFactory.createTitledBorder("Arquivos"));
        painelArquivo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        lblArquivoDestino.setFont(new java.awt.Font("Arial", 3, 10)); // NOI18N
        lblArquivoDestino.setForeground(new java.awt.Color(142, 0, 0));
        lblArquivoDestino.setToolTipText("");
        lblArquivoDestino.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblArquivoOrigem.setFont(new java.awt.Font("Arial", 3, 10)); // NOI18N
        lblArquivoOrigem.setForeground(new java.awt.Color(142, 0, 0));
        lblArquivoOrigem.setToolTipText("");
        lblArquivoOrigem.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblFrom.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        lblFrom.setText("Origem:");

        lblTo.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        lblTo.setText("Destino:");

        javax.swing.GroupLayout painelArquivoLayout = new javax.swing.GroupLayout(painelArquivo);
        painelArquivo.setLayout(painelArquivoLayout);
        painelArquivoLayout.setHorizontalGroup(
            painelArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelArquivoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painelArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblArquivoOrigem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblArquivoDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );
        painelArquivoLayout.setVerticalGroup(
            painelArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelArquivoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelArquivoLayout.createSequentialGroup()
                        .addComponent(lblFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addComponent(lblArquivoOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(painelArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblArquivoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelArquivoLayout.createSequentialGroup()
                        .addComponent(lblTo, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addGap(9, 9, 9)))
                .addGap(16, 16, 16))
        );

        painelArquivoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblArquivoDestino, lblArquivoOrigem});

        painelFoto.setBorder(javax.swing.BorderFactory.createTitledBorder("Foto"));
        painelFoto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        lblFoto.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout painelFotoLayout = new javax.swing.GroupLayout(painelFoto);
        painelFoto.setLayout(painelFotoLayout);
        painelFotoLayout.setHorizontalGroup(
            painelFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelFotoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelFotoLayout.setVerticalGroup(
            painelFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelFotoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFoto, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
        );

        painelPdf.setBorder(javax.swing.BorderFactory.createTitledBorder("Pdf"));
        painelPdf.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        lblFoto1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout painelPdfLayout = new javax.swing.GroupLayout(painelPdf);
        painelPdf.setLayout(painelPdfLayout);
        painelPdfLayout.setHorizontalGroup(
            painelPdfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPdfLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelPdfLayout.setVerticalGroup(
            painelPdfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPdfLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnConverterFotoPdf.setText("Converter Pdf");
        btnConverterFotoPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConverterFotoPdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnSair)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConverterFotoPdf)
                .addGap(170, 170, 170))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSair)
                    .addComponent(btnConverterFotoPdf))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout painelPrincipalLayout = new javax.swing.GroupLayout(painelPrincipal);
        painelPrincipal.setLayout(painelPrincipalLayout);
        painelPrincipalLayout.setHorizontalGroup(
            painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincipalLayout.createSequentialGroup()
                .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelPrincipalLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(painelArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(painelPrincipalLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(painelPrincipalLayout.createSequentialGroup()
                                .addComponent(painelFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(painelPdf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        painelPrincipalLayout.setVerticalGroup(
            painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelPdf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(painelFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(painelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Abrir um arquivo
        
         // metodo para buscar um arquivo de foto
        jFileChooserFoto = new javax.swing.JFileChooser();
        fotoSource = null;
        
        String fotoDestino = System.getProperty("user.dir") + "\\MeusGraficos\\";
        
        String fotoNome ="teste";
        
        int retVal;
        jFileChooserFoto.addChoosableFileFilter(new TextFilter());

        retVal = jFileChooserFoto.showOpenDialog(this);

        if (retVal == JFileChooser.APPROVE_OPTION) {
            
            fotoSource = jFileChooserFoto.getSelectedFile().getAbsolutePath();
            
            fotoNome = fotoNome + jFileChooserFoto.getSelectedFile().getName();
           
        }

        //System.out.println("Present Project Directory : "+ System.getProperty("user.dir"));
        //System.out.println(fotoDestino+fotoNome);
        jFileChooserFoto.setVisible(false);
        copiarFotoToPetfast(fotoSource, fotoDestino, fotoNome);
        lblArquivoOrigem.setText(fotoSource);
        lblArquivoDestino.setText(fotoDestino + fotoNome);
        fotoUrl =lblArquivoDestino.getText();
        colocarFotoLabelUrl(fotoUrl);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnConverterFotoPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConverterFotoPdfActionPerformed
        // Converter 
        
        
    }//GEN-LAST:event_btnConverterFotoPdfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CriarPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CriarPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CriarPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CriarPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CriarPdf().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton btnConverterFotoPdf;
    private javax.swing.JButton btnSair;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblArquivoDestino;
    private javax.swing.JLabel lblArquivoOrigem;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblFoto1;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblTo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JPanel painelArquivo;
    private javax.swing.JPanel painelFoto;
    private javax.swing.JPanel painelPdf;
    private javax.swing.JPanel painelPrincipal;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    
    public void copiarFotoToPetfast(String fonte, String destino, String nomeArquivo) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        //long start = new Date().getTime();

        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(fonte);
            fos = new FileOutputStream(destino + nomeArquivo);
            int i;
            while ((i = fis.read()) != -1) {
                fos.write(i);
            }
            // System.out.println("Arquivo copiado!"); 
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CriarPdf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CriarPdf.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fis.close();
            } catch (IOException ex) {
                Logger.getLogger(CriarPdf.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(CriarPdf.class.getName()).log(Level.SEVERE, null, ex);
            }

        }	//long stop = new Date().getTime();
        //System.out.println("Tempo de copia:" + (stop - start) + "ms");

    }//fimal m√©todo copiarFotoToPetfast
    
    private boolean verificarFotoExiste(String url) {
        int i = url.lastIndexOf('.');
        boolean resp = false;
        Image image = null;
        File f = new File(url);
        BufferedImage img = null;

        if (f.exists()) {

            try {
                image = ImageIO.read(f);
                resp = true;
            } catch (IOException ex) {
                System.out.println("" + ex);
                resp = false;
                Logger.getLogger(CriarPdf.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (i > 0 && i < url.length() - 1) {
                if (url.substring(i + 1).toLowerCase().equals("jpg")) {
                    return true;
                }
            }

            //filtra para abrir somente arquivos jpeg
            if (i > 0 && i < url.length() - 1) {
                if (url.substring(i + 1).toLowerCase().equals("jpeg")) {
                    return true;
                }
            }

            //filtra para abrir somente arquivos jpg
            if (i > 0 && i < url.length() - 1) {
                if (url.substring(i + 1).toLowerCase().equals("png")) {
                    return true;
                }
            }

        } else {
            resp = false;
        }

        return resp;

        /**
         *
         * File f = new File(petfast/imagensPet""); if(f.exists()){
         * System.out.println("Arquivo encontrado!");
         * System.out.println("Arquivo:"+ f.getPAth());
         * System.out.println("Arquivo:"+ f.getAbsolutePAth());
         * System.out.println("Arquivo:"+ f.getName());
         * System.out.println("Arquivo:"+ f.canExecute());
         * System.out.println("Arquivo:"+ f.canRead());
         * System.out.println("Arquivo:"+ f.canWrite()); }else{
         * System.out.println("Arquivo nao encontrado!");
         *
         * }
         */

        /*
         try {
         // Lendo um arquivo
         File sourceimage = new File("source.gif");
         image = ImageIO.read(sourceimage);
         */
        /*
         try {
         img = ImageIO.read(TelaAnimal.class.getResourceAsStream(url));
         } catch (FileNotFoundException e) {
         resp=false;//Mostre o erro e fa√ßa alguma coisa!
         } catch (Exception e) {
         resp=false;//Mostre o erro e fa√ßa alguma coisa!
         }
         if (img != null) {
         //Continue
         } else {
         resp = true;
         }
         */
    }//final m√©todo verificarfotoExiste
    
    private void colocarFotoLabelUrl(String urlFoto) {
        lblFoto.setIcon(null);
        Dimension d = lblFoto.getSize();
        //int width = tctPetFoto.getWidth();
        //int height = tctPetFoto.getHeight();
        //System.out.println("width: "+d.width + " height: "+d.height);
        //String urlFoto = tctPetFoto.getText();
        ImageIcon foto;
        foto = new ImageIcon(urlFoto);

        foto.setImage(foto.getImage().getScaledInstance((d.width - 20), (d.height - 20), 100));
        //img.setImage(img.getImage().getScaledInstance(xLargura, yAltura, 100));
        lblFoto.setIcon(foto);
        //lblFotoPet.setIcon(new javax.swing.ImageIcon(getClass().getResource(urlFoto)));
    }
    
}
